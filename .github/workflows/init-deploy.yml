---
name: Init deploy 

on:
  workflow_dispatch:

jobs:
  init-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Init deploy
        env:
          ORG: ${{ secrets.ORG }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -e 

          INSTANCE_ID=$(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --filters "Name=tag:Environment,Values=prod" "Name=tag:Organization,Values=${ORG}" \
            --query "Reservations[].Instances[].InstanceId" \
            --output json | jq -r '.[]' | head -n 1)

          if [[ -z "${INSTANCE_ID}" ]]; then
            echo "Error: No instance found matching the given filters."
            exit 1
          fi

          echo "HA instance ID: ${INSTANCE_ID}"

          CMD="export CF_TUNNEL_TOKEN=${{ secrets.CF_TUNNEL_TOKEN }} && \
               curl -H 'Authorization: token ${{ secrets.GH_ACCESS_TOKEN }}' -s https://raw.githubusercontent.com/${{ github.repository }}/main/prod/docker-stack.yml | \
               docker stack deploy -c - ${{ secrets.ORG }} --with-registry-auth"
          .github/scripts/aws-ssm-exec-cmd-on-ec2.sh "${CMD}" "${INSTANCE_ID}"

          sleep 10

          CMD="docker service ls --format '{{.Image}} {{.Replicas}}'"
          .github/scripts/aws-ssm-exec-cmd-on-ec2.sh "${CMD}" "${INSTANCE_ID}" > init_deploy_result.txt

      - name: Upload result artifact for "Init deploy"
        uses: actions/upload-artifact@v4
        with:
          name: init-deploy-result
          path: init_deploy_result.txt

  discord-notification:
    runs-on: ubuntu-latest
    needs: init-deploy
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Download result artifact for "Init deploy"
        uses: actions/download-artifact@v4
        with:
          name: init-deploy-result
  
      - name: Send notification to Discord's deployments channel
        run: |
          set -e

          ENV="prod"
          ACTION_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  
          CNT=0
          RESULT="$(mktemp)"
          while read LINE; do
            [[ -z "${LINE}" ]] && continue
            CNT=$((CNT + 1))

            IMAGE="$(echo "${LINE}" | cut -d ' ' -f 1)" 
            REPLICAS="$(echo "${LINE}" | cut -d ' ' -f 2)" 
            echo "Image: ${IMAGE}"
            echo "Replicas: ${REPLICAS}"
  
            if [[ "${REPLICAS}" != "1/1" ]]; then 
                printf "${IMAGE}, " >> "${RESULT}"
            fi
          done < <(cat init_deploy_result.txt)

          # If there are 0 services to deploy, something went wrong
          if [[ ${CNT} -eq 0 ]]; then
            TITLE="Recreating cluser"
            DESCRIPTION="**0 services** are running in the new cluster."
            STATUS="failure"
            FIELDS="Environment=${ENV},Action=${ACTION_LINK}"
            DISCORD_DEPLOYMENTS_WEBHOOK_URL=${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
            .github/scripts/send-discord-notification.sh "${TITLE}" "${DESCRIPTION}" "${STATUS}" "${FIELDS}" "${DISCORD_DEPLOYMENTS_WEBHOOK_URL}"
            exit 0
          fi

          # Remove the ", " at the end
          if [[ -s "${RESULT}"  ]]; then
              rev "${RESULT}" | cut -c3- | rev
          fi
          echo "Failing services: ${RESULT}" 

          # Count the number of failing services
          CNT_FAILING_SERVICES=$(echo "${RESULT}" | tr -cd ',' | wc -c)
          echo "Number of failing services: ${CNT_FAILING_SERVICES}" 

          if [[ -s "${RESULT}"  ]]; then
            TITLE="Recreating cluser"
            DESCRIPTION="The cluster was recreated **successfully**."
            STATUS="success"
            FIELDS="Environment=${ENV},Action=${ACTION_LINK}"
            DISCORD_DEPLOYMENTS_WEBHOOK_URL=${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
            .github/scripts/send-discord-notification.sh "${TITLE}" "${DESCRIPTION}" "${STATUS}" "${FIELDS}" "${DISCORD_DEPLOYMENTS_WEBHOOK_URL}"
          else
            TITLE="Recreating cluser"
            DESCRIPTION="**${CNT_FAILING_SERVICES} services** failed to start after cluster recreation"
            STATUS="failure"
            FIELDS="Images=${RESULT},Environment=${ENV},Action=${ACTION_LINK}"
            DISCORD_DEPLOYMENTS_WEBHOOK_URL=${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
            .github/scripts/send-discord-notification.sh "${TITLE}" "${DESCRIPTION}" "${STATUS}" "${FIELDS}" "${DISCORD_DEPLOYMENTS_WEBHOOK_URL}"
          fi

