---
name: Deploy cluster

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-cluster:
    if: github.actor != 'specific-user'
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -e 

          INSTANCE_ID=$(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --filters "Name=tag:Environment,Values=prod" "Name=tag:Organization,Values=ip812" \
            --query "Reservations[].Instances[].InstanceId" \
            --output json | jq -r '.[]' | head -n 1)

          if [[ -z "${INSTANCE_ID}" ]]; then
            echo "Error: No instance found matching the given filters."
            exit 1
          fi

          echo "HA instance ID: ${INSTANCE_ID}"

          CMD="export IP812_TUNNEL_TOKEN=${{ secrets.IP812_TUNNEL_TOKEN }} && \
               curl -H 'Authorization: token ${{ secrets.GH_ACCESS_TOKEN }}' -s https://raw.githubusercontent.com/${{ github.repository }}/main/prod/docker-stack.yml | \
               docker stack deploy -c - ip812 --with-registry-auth"
          .github/scripts/aws-ssm-exec-cmd-on-ec2.sh "${CMD}" "${INSTANCE_ID}"

          sleep 10

          CMD="docker service ls --format '{{.Name}} {{.Replicas}}'"
          .github/scripts/aws-ssm-exec-cmd-on-ec2.sh "${CMD}" "${INSTANCE_ID}" > deploy_cluster_result.txt

      - name: Upload result artifact for "Deploy cluster"
        uses: actions/upload-artifact@v4
        with:
          name: deploy-cluster-result
          path: deploy_cluster_result.txt

  discord-notification:
    runs-on: ubuntu-latest
    needs: deploy-cluster
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Download result artifact for "Deploy cluster"
        uses: actions/download-artifact@v4
        with:
          name: deploy-cluster-result
  
      - name: Send notification to Discord's deployments channel
        run: |
          set -e
  
          while read LINE; do
            ENV="prod"
            IMAGE="$(echo "${LINE}" | cut -d ' ' -f 1)" 
            REPLICAS="$(echo "${LINE}" | cut -d ' ' -f 2)" 
            echo "Image: ${IMAGE}"
            echo "Replicas: ${REPLICAS}"
  
            if [[ "${REPLICAS}" == "1/1" ]]; then 
              TITLE="Cluster deployment status"
              DESCRIPTION="The cluster deployment was **successful**.  üöÄ"
              STATUS="success"
              declare -A FIELDS=(
                ["Image"]="$IMAGE"
                ["Environment"]="$ENV"
              )
              DISCORD_DEPLOYMENTS_WEBHOOK_URL=${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
              .github/scripts/send-discord-notification.sh "${TITLE}" "${DESCRIPTION}" "${STATUS}" FIELDS "${DISCORD_DEPLOYMENTS_WEBHOOK_URL}"
            else
              TITLE="Cluster deployment status"
              DESCRIPTION="The cluster deployment **failed**. ‚ùå"
              STATUS="failure"
              declare -A FIELDS=(
                ["Image"]="$IMAGE"
                ["Environment"]="$ENV"
              )
              DISCORD_DEPLOYMENTS_WEBHOOK_URL=${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
              .github/scripts/send-discord-notification.sh "${TITLE}" "${DESCRIPTION}" "${STATUS}" FIELDS "${DISCORD_DEPLOYMENTS_WEBHOOK_URL}"
            fi
          done < <(cat deploy_cluster_result.txt)

