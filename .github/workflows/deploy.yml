name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [update-image]

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
        contents: read
        packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to ECR
      id: ecr
      uses: jwalton/gh-ecr-login@v3
      with:
        region: ${{ secrets.AWS_REGION }}
        access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Get ECR Registry Token
      id: ecr-token
      run: |
        echo "REGISTRY_TOKEN=$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }})" >> $GITHUB_ENV

    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        IP812_TUNNEL_TOKEN: ${{ secrets.IP812_TUNNEL_TOKEN }}
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        DISCORD_DEPLOYMENTS_WEBHOOK_URL: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        exec_cmd() {
            if [[ $# -ne 2 ]]; then
                echo "provide 2 args"
                return 1
            fi

            local cmd="$1"
            local instance_id="$2"

            cmd_id="$(aws ssm send-command \
                --region "${AWS_REGION}" \
                --document-name "AWS-RunShellScript" \
                --targets "Key=instanceIds,Values=${instance_id}" \
                --parameters "commands=[\"${cmd}\"]" \
                --query 'Command.CommandId' \
                --output text)"

            cnt=0
            while true; do
                cnt=$((cnt + 1))
                status="$(aws ssm get-command-invocation \
                    --region "${AWS_REGION}" \
                    --instance-id "${instance_id}" \
                    --command-id "${cmd_id}" \
                    --query 'Status' \
                    --output text)"
                if [[ "${status}" != "InProgress" ]]; then
                    break
                fi
                if [ "${cnt}" -eq 10 ]; then
                    echo "Command \"${cmd}\"  never ends"
                    exit 42
                fi
                sleep 1
            done

            aws ssm get-command-invocation \
                --region "${AWS_REGION}" \
                --instance-id "${instance_id}" \
                --command-id "${cmd_id}" \
                --query 'StandardOutputContent' \
                --output text
        }

        send_discord_notification() {
          curl -H "Content-Type: application/json" -X POST -d '{
            "embeds": [
              {
                "title": "Deployment Status",
                "description": "The deployment was **'successful'**.",
                "color": '3066993',
                "fields": [
                  {"name": "Version", "value": "v1.2.3", "inline": true},
                  {"name": "Environment", "value": "prod", "inline": true}
                ],
                "footer": {"text": "GitHub Actions", "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"},
                "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
              }
            ]
          }' ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK_URL}}
        }

        while read -r instance_id; do
            cmd="export IP812_TUNNEL_TOKEN=${IP812_TUNNEL_TOKEN} && \
            curl -H \\\"Authorization: token ${ACCESS_TOKEN}\\\" -s https://raw.githubusercontent.com/${GITHUB_REPOSITORY}/main/prod/docker-stack.yml | \
            docker stack deploy -c - ip812 --with-registry-auth"

            echo "Executing: ${cmd}"
            exec_cmd "${cmd}" "${instance_id}"

            sleep 5

            result="docker service ls"
            exec_cmd "${result}" "${instance_id}" >> result.txt

            # TODO: use the result.txt to determine what message to send to discord
            send_discord_notification
        done < <(aws ec2 describe-instances \
            --region "${AWS_REGION}" \
            --filters "Name=tag:Environment,Values=prod" "Name=tag:Organization,Values=ip812" \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output json | jq -r '.[]')

